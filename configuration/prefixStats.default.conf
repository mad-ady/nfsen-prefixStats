##############################
#
# prefixStats plugin config file
#
# When you make any changes in this file, run 'nfsen reload' 
# to make sure everything gets reloaded
#
# The syntax must conform to Perl syntax.
# To check if the modified file doesn't have syntax errors, run 'perl prefixStats.conf' from the command prompt.
# If you don't get any output, it means it's ok.
#
# Setting all variables is *mandatory*
#
##############################

package PSConfig;


###                ###
###  Introduction  ###
###                ###

#
# Here's a brief introduction on what you need to configure.
#
# For each new source you need to install, after you have added the source in nfsen, you can add it here to get customized graphs for it.
# The minimum information you need to know is: 
#  - the source's name (the same that was in nfsen)
#  - every exporting interface snmp index (or the exporting interfaces that you are interested in) [for cisco you can find this with 'sh snmp mib ifmib ifindex']
#  - the type of the interface (the netflow export is ingress or egress or both) [for cisco you can find this with 'show run int x']
# 
# You should also know this information, to actually draw graphs:
#  - a list of destination prefixes that you want to draw graphs for (can be empty)
#  - a list of source prefixes that you want to draw graphs for (can be empty)
#  - a number for top source/destination AS per interface (can be 0).
#  If you choose to ignore all of these, you won't get any graphs!
#
# There are some features for this module, such as:
#  - if you define only one interface for a source, the graphs for this interface will be displayed as Global Graphs (and the interface will not 
#    be displayed in the web interface).
#  - if you define more than one interface for a source, you will have distinct graphs (per interface), and the global graphs will be the sum of 
#    the individual graphs.
#  - for the top X source/destination prefix/host/as you will also get the value for 'other' traffic (that doesn't fit in the top).
#  - the other traffic can be shown in the pie charts in the web interface.
#
#  ### Known bugs ###
#  - the first time a rrd is created, the value is not updated. I don't know why.
#  - the measurements for 'other' traffic assumes that the prefix classes don't overlap. If they overlap, the others will not be accurate!
#  - there MAY be bugs when updating rrds for inif and outif traffic (hasn't been tested).


###                  ###
###  Global section  ###
###                  ###

# Path to the root of the web interface
$prefixStatsWebDir = "/var/www/html/statistics";

# Path to where the rrd files will be saved.
# Needs to be writable by the netflow user and by the www/apache group.

$rrdDir = "$PSConfig::prefixStatsWebDir/rrds";

# Path to picture directory (where to save the images)
# Needs to be writable by the netflow user and/or by the apache(www) group

$pictureDir = "$PSConfig::prefixStatsWebDir/pics";

# specify if you want to process both prefix and ASes or if you want to divide the 
# work between several machines and process only prefixes or only ASes.
# if unsure, set both (prefix and as to 1).

%process = (
    'prefix' => 1,
    'as'     => 1,
);

# Set to 'true' (1) if you want the graphs to be drawn (as png images) only when you want to see them. 
# (good if you watch the graphs seldomly, reduces the load on the machine.)
# If set to false (0), it will draw graphs every 5 minutes (good if you watch the graphs a lot)
# (data is collected regardless of this settings)

$drawGraphsOnRequest = 1;


###                   ###
###  Sources section  ###
###                   ###

# The 'sources' section is the most important and most complex section. 
# When adding a new netflow source for graphing, you must add an entry here.
# Please, be WARNED that by making a mistake in this file, you can run into ALL kinds of hard to spot bugs!

# the syntax is:
#
# %sources = (
#      'netflowSource1' => {
#                        'setting' => 'value',
#                      },
#          );

# the source's name MUST match exactly the name given in nfsen. (Otherwise it won't work!).

# here is a complete example for the definition of a new source. Model you own sources starting from this template.

%sources = (

###                                                                  ###
###  This entry is just a template. Customize it to fit your needs!  ###
###                                                                  ###

#
#    'myRouter'  => {
#			'comment'                              => '',
#		    'calculateGlobalASBasedOnInterfaceSum' => 0,
#			'sourceURL'                            => 'right.pl',
#			'pieURL'                               => 'pie.pl',
#			'sampleRate'                           => '1',
#			'multiplySamplingRate'                 => '0',
#			'deleteUnusedRRD'                      => 72,
#			'hideInactiveASHours'                  => 36,
#			'personalAS'                           => '101',
#			'srcPrefix'                            => [],
#			'drawOnlyTop20SrcPrefix'               => 0,
#			'drawTopXSources'                      => 0,
#			'dstPrefix'                            => [],
#			'interfaces'                           => {
#								    '66' => {
#										'description'   => 'Interface with index 66',
#										'interfaceType' => [qw( inif )],
#										'src as'        => 10,
#										'dst as'        => 10,
#									   },
#								    '12' => {
#										'description'   => 'Interface with index 12',
#										'interfaceType' => [qw( inif )],
#										'src as'        => 10,
#										'dst as'        => 10,
#									    },
#								},
#		},
#

###                        ###
### Parameter explanation  ###
###                        ###

# This (rather long) section explains what each parameter does, what it's default value is, and how you should use it.
#
# 1. Source name
#  Each netflow source has a name (typed in when you configure netflow to start capturing for that source).
#  Add the exact same name in this section (which defines the parameters for this source).
#
#  Eg.:
#    'myRouter'  => {
#
#  Please note that there is a closing bracket (}) at the end of the section.
#
# 2. Comment
#  You can specify (or not) a small comment for each source, that will be displayed in the web interface.
#  The comment is just a string, with no other significance.
#  Use it to better explain what each source represents.
#
#  Eg.:
#    'comment'  => 'Gateway to the Internet',
#
# 3. calculateGlobalASBasedOnInterfaceSum
#  This confusing parameter name forces the calculation of the AS traffic to be done by adding the individual AS traffic on each defined interface.
#  This method is slower, but it's preffered if your router exports all flows, not just the flows on the interface that interests you
#  It was meant to solve a bug on Cisco 7600 and 6500 platforms (the router exports all traffic, not just the traffic for the configured interfaces).
#  It's safe to set it to 0, but if you see you are receiving flows from other interfaces (that shouldn't necessarily export netflow), set it to 1.
#
#  Eg.:
#    'calculateGlobalASBasedOnInterfaceSum' => 0;
#
# 4. sourceURL
#  The web interface was designed to be able to work distributed on different machines. So, you can add here the URL were you can find
#  the web interface for another collector machine. 
#  By default, if you only use one collector (eg. one netflow instance), set this value to 'right.pl'.
#  
#  Eg.:
#    'sourceURL'  => 'right.pl',
#  or
#    'sourceURL'  => 'http://my.server.com/statistics/right.pl',
#
# 5. pieURL
#  The same as the above. This indicates the link to the script that draws those beautiful pie charts... :)
#  By default, if you only use one collector, set this value to 'pie.pl'.
#
#  Eg.:
#    'pieURL'  => 'pie.pl',
#  or
#    'pieURL'  => 'http://my.server.com/statistics/pie.pl',
#
# 6. sampleRate
#  This value allows you to specify the sampling rate for your source. If your flow is sampled, you can correct the graphs by multiplying the 
#  collected value with this parameter. So, if your router uses a sampling rate of 10 (sending one in 10 flows), add 10 here to multiply the 
#  values by 10 in the graphs.
#  Please note, that for time based sampling, it's not so straigth-forward to say what the sampling rate is.
#  By default, if the flow is not sampled, or if you don't want to correct the graphs, set it to 1.
#
#  Eg.:
#    'sampleRate' => '1',
#  or
#    'sampleRate' => '10',
#
# 7. multiplySamplingRate
#  Set this value to 1 if you want your graphs to be corrected by the value specified in 'sampleRate', otherwise set it to 0.
#  By default, if the flow is not sampled, or if you don't want to correct the graphs, set it to 0.
#
#  Eg.:
#    'multiplySamplingRate' => '0',
#
# 8. deleteUnusedRRD
#  Set this value to the number of hours you want to keep a rrd file that is no longer updated. If any rrd file was not updated in x hours,
#  it will be deleted when the user accesses the web interface (and you will loose all graph history from that file). This can be usefull when you 
#  want to graph top 10 src/dst AS, or top 10 source ip, because the list can get big pretty soon.
#  For now, there is no automatic cleanup (cleanup is done only if you visit the web interface and run a series of queries), but this might change
#  in the future.
#  If you want to keep all rrd files, set this to 0. 
#
#  Eg.:
#    'deleteUnusedRRD' => '72',
#
# 9. hideInactiveASHours
#  This variable allows you to hide from the web interface the ASes and prefixes that haven't been active in the past x hours.
#  The rrd files are not deleted, they are just skipped. As soon as a rrd is updated, the link will appear again in the web interface
#  If you don't want this feature, set it to a very large number (in hours).
#  
#  Eg.:
#    'hideInactiveASHours' => '36',
#
# 10. personalAS
#  All flows that have as destination a host in your network (in the same AS domain) will have a 'dst as' with value 0. 
#  Add here your AS number, so that the web interface displays it correctly.
#  If you don't know what this is, or if you don't want to use it, set this variable to 0.
#
#  Eg.:
#    'personalAS' => '101',
#
# 11. srcPrefix
#  Add here a list of source prefixes you wish to draw graphs for. It's useful if you want to know what is the traffic for your customer's prefixes.
#  Based on this list, you can draw a pie chart with the traffic distribution in the last 5 minutes, or a specified time interval.
#  If you don't want to use this, specify here an empty list.
#
#  Eg.:
#    'srcPrefix' => [qw(15.15.15.0/24 15.20.0.0/16 15.25.30.35/32)],
#  or
#    'srcPrefix' => [], 
#
# 12. drawOnlyTop20SrcPrefix
#  I added this option because I was faced with the problem of drawing graphs for 400 source prefixes, which took some time.
#  Instead, I generated a top based on the 400 prefixes (yes, I parsed all 400), and only updated the rrds for the top 20.
#  Use this if you have a lot of source prefixes, and you have defined them in srcPrefix.
#  If you don't want to use this, set it to 0.
#
#  Eg.:
#    'drawOnlyTop20SrcPrefix' => 0,
#
# 13. drawTopXSources
#  Use this to draw a top X source IP, to see which are the source hosts with most traffic. You can use this to locate busy servers from
#  your peer networks. This doesn't depend on srcPrefix or drawOnlyTop20SrcPrefix in any way.
#  If you don't want to use this feature, set it to 0, otherwise specify the size of the top. I don't recommend going over top 20 or leaving
#  this option on for a long time, because it adds a lot of rrd files and may fill your partition if left unchecked.
#
#  Eg.:
#    'drawTopXSources' => 30,
#
# 14. dstPrefix
#  Add here a list of destination prefixes you wish to draw graphs for. It's useful if you want to know what is the traffic for your prefixes.
#  Based on this list, you can draw a pie chart with the traffic distribution in the last 5 minutes, or a specified time interval.
#  If you don't want to use this, specify here an empty list.
#
#  Eg.:
#    'dstPrefix' => [qw(20.20.20.0/24 20.25.0.0/16 20.30.35.40/32)],
#  or
#    'dstPrefix' => [],
#
# 15. interfaces
#  This section defines the interfaces you wish to monitor. You need to specify here the interface snmp index, the type of interface, a
#  small description and if you want to monitor src and/or dst as.
#
#  Add an interface by specifying the snmp index:
# 
#  Eg.:
#    '6' => {
#
#  You can have multiple interface sections for the same router (specify them as blocks).
#
# 15.1 description
#  Specify here a small description of the interface. It will be displayed in the web interface and on the interface graphs.
#  It is recommended that you also specify the interface name in this description
#
#  Eg.:
#    'description'   => 'Fa0/0 Link to Internet',
#
# 15.2 interfaceType
#  Specify here if the interface will be an input or output interface (from the point of view of the exported flows), or both.
#  If you are exporting only ingress flows ( 'ip flow ingress' is set on the cisco router interface ), set this to inif.
#  If you are exporting only egress flows ('ip flow egress' is set on the cisco router interface), set this to outif.
#  If you are exporting both ingress and egress flows, set the array with both values (NOT TESTED!!!).
#  If you don't know what to set, set it to inif. If it doesn't graph anything for an hour, set it to outif. If you see graphs both times,
#  set it to inif outif.
#  
#  Eg.:
#    'interfaceType' => [qw( inif )],
#  or 
#    'interfaceType' => [qw (outif)],
#  or 
#    'interfaceType' => [qw (inif outif)],
#
# 15.3 src as
#  Specify here if you want to collect a top X source AS on this interface. Specify the number of the top. Set to 0 if you don't want to 
#  gather a top X AS on this interface. Note that the collection depends on what's set in process{'as'}.
#  If unsure, set this to 10, and tweak it later.
#
#  Eg.:
#    'src as' => 10,
#
# 15.4 dst as
#  Specify here if you want to collect a top X destination AS on this interface. Specify the number of the top. Set to 0 if you don't want to
#  gather a top X AS on this interface. Note that the collection depends on what's set in process{'as'}.
#  If unsure, set this to 10, and tweak it later.
#
#  Eg.:
#    'dst as' => 10,
#


###                                         ###
###  Add your own sources below this line.  ###
###                                         ###



###                                         ###
###  Don't add your sources past this line  ###
###                                         ###
);

# ensure a return value - to permit loading as a module.
1;